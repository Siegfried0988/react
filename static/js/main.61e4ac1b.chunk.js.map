{"version":3,"sources":["view/layout/nav.jsx","view/products/productsIndexPage.jsx","view/products/productsShowPage.jsx","view/orders/ordersIndexPage.jsx","view/orders/ordersShowPage.jsx","view/orders/orderSuccessPage.jsx","view/orders/orderFailedPage.jsx","view/cart/cartIndexPage.jsx","view/cart/checkoutPage.jsx","view/register/AddressPicker.jsx","view/register/ReceiptType.jsx","view/register/registerPage.jsx","view/layout/appRoutes.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","useState","open","setOpen","modal","onClose","to","align","navIcon","tabIndex","hasRipple","icon","onClick","ProductsIndexPage","ProductsShowPage","OrdersIndexPage","OrdersShowPage","OrderSuccessPage","OrderFailedPage","CartIndexPage","CheckoutPage","AddressPicker","props","componentDidMount","div","current","querySelectorAll","forEach","select","removeAttribute","handlerRelated","name","value","mergeObject","taiwanPostalCodes","fullAddress","city","district","postalCode","address","onEnhancedChange","index","item","console","log","getAttribute","handler","inputHandler","e","target","clearAddress","getCityOptions","cities","map","key","getDistricOptions","districts","render","cityOptions","cityData","Object","keys","districtsOptions","ref","style","padding","label","bind","enhanced","outlined","type","disabled","helperText","leadingIcon","role","onTrailingIconSelect","trailingIcon","onChange","React","createRef","Component","ReceiptType","document","getElementById","receipt","removeValueFromArray","array","filter","element","checkboxHandler","checkboxParent","closest","newValue","values","includes","push","receiptType","taxId","receiptOptions","tag","id","checked","Fragment","attributeName","nativeControlId","htmlFor","RegisterPage","setState","state","checkIsReceiptTypeReady","result","checkIsAddressReady","isReady","desktopColumns","phoneColumns","tabletColumns","TaiwanPostalCode","Routes","path","exact","App","className","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61e4ac1b.chunk.js","sourcesContent":["import React, {useState} from 'react' \r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    Redirect\r\n  } from \"react-router-dom\";\r\nimport TopAppBar, {\r\n    TopAppBarIcon,\r\n    TopAppBarRow,\r\n    TopAppBarSection,\r\n    TopAppBarTitle,\r\n} from '@material/react-top-app-bar';\r\n\r\nimport List, { ListItem } from '@material/react-list';\r\nimport Drawer from '@material/react-drawer';\r\nimport MaterialIcon from '@material/react-material-icon';\r\n\r\nconst Nav = () => {\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    return (\r\n        <>\r\n            <Drawer\r\n                modal\r\n                open={open}\r\n                onClose={() => {\r\n                    setOpen(false)\r\n                }}\r\n            >\r\n                <List>\r\n                    <Link to=\"/\">\r\n                        <ListItem>首頁</ListItem>\r\n                    </Link>\r\n                    <Link to=\"/products\">\r\n                        <ListItem>所有商品</ListItem>\r\n                    </Link>\r\n                    <Link to=\"/cart\">\r\n                        <ListItem>購物車</ListItem>\r\n                    </Link>\r\n                    <Link to=\"/orders\">\r\n                        <ListItem>歷史訂單</ListItem>\r\n                    </Link>\r\n                    <Link to=\"/register\">\r\n                        <ListItem>註冊</ListItem>\r\n                    </Link>\r\n                </List>\r\n            </Drawer>\r\n            <TopAppBar>\r\n                <TopAppBarRow>\r\n                    <TopAppBarSection align='start'>\r\n                        <TopAppBarIcon navIcon tabIndex={0}>\r\n                            <MaterialIcon hasRipple icon='menu' onClick={\r\n                                () => {\r\n                                    setOpen(!open)\r\n                                }\r\n                            }/>\r\n                        </TopAppBarIcon>\r\n                        <TopAppBarTitle>\r\n                            <Link to=\"/\">\r\n                            購物網站\r\n                            </Link>\r\n                        </TopAppBarTitle>\r\n                    </TopAppBarSection>\r\n                </TopAppBarRow>\r\n            </TopAppBar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react' \r\n\r\nconst ProductsIndexPage = () => {\r\n    return (\r\n        <div>\r\n            ProductsIndexPage\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsIndexPage;","import React from 'react' \r\n\r\nconst ProductsShowPage = () => {\r\n    return (\r\n        <div>\r\n            ProductsShowPage\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsShowPage;","import React from 'react' \r\n\r\nconst OrdersIndexPage = () => {\r\n    return (\r\n        <div>\r\n            OrdersIndexPage\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrdersIndexPage;","import React from 'react' \r\n\r\nconst OrdersShowPage = () => {\r\n    return (\r\n        <div>\r\n            OrdersShowPage\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrdersShowPage;","import React from 'react' \r\n\r\nconst OrderSuccessPage = () => {\r\n    return (\r\n        <div>\r\n            OrderSuccessPage\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderSuccessPage;","import React from 'react' \r\n\r\nconst OrderFailedPage = () => {\r\n    return (\r\n        <div>\r\n            OrderFailedPage\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderFailedPage;","import React from 'react' \r\n\r\nconst CartIndexPage = () => {\r\n    return (\r\n        <div>\r\n            CartIndexPage\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartIndexPage;","import React from 'react' \r\n\r\nconst CheckoutPage = () => {\r\n    return (\r\n        <div>\r\n            CheckoutPage\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckoutPage;","import React from 'react' \r\nimport Card, {\r\n    CardPrimaryContent,\r\n} from \"@material/react-card\";\r\n\r\nimport TextField, { HelperText, Input } from '@material/react-text-field';\r\nimport MaterialIcon from '@material/react-material-icon';\r\nimport Select, { Option } from '@material/react-select';\r\n\r\n\r\nclass AddressPicker extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.cities = Object.keys(this.props.taiwanPostalCodes)\r\n\r\n        this.div = React.createRef()\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let enhanced_selects  = this.div.current.querySelectorAll(\"input[name='enhanced-select']\")\r\n        enhanced_selects.forEach(select => {\r\n            select.removeAttribute(\"name\")\r\n        });\r\n    }\r\n\r\n    handlerRelated = (name, value) => {\r\n        let mergeObject = {}\r\n        const { taiwanPostalCodes, fullAddress: { city, district, postalCode, address } } = this.props\r\n\r\n        if (name == \"city\" && city != value) {\r\n            mergeObject['district'] = \"\"\r\n            mergeObject['postalCode'] = \"\"\r\n        } else if (name == \"district\" && district != value) {\r\n            const cityData = taiwanPostalCodes[city];\r\n            const postalCode = cityData[value];\r\n            mergeObject['postalCode'] = postalCode\r\n        }\r\n\r\n        return mergeObject\r\n    }\r\n\r\n    onEnhancedChange = (name, index, item) => {\r\n        console.log(this)\r\n        const value = item.getAttribute('data-value')\r\n        const { fullAddress, handler } = this.props\r\n        const mergeObject = this.handlerRelated(name, value)\r\n        handler(\"fullAddress\", { ...fullAddress, ...mergeObject, [name]: value })\r\n    };\r\n\r\n    inputHandler = (e) => {\r\n        const { name, value } = e.target\r\n        const { fullAddress, handler } = this.props\r\n        const mergeObject = this.handlerRelated(name, value)\r\n        handler(\"fullAddress\", { ...fullAddress, ...mergeObject, [name]: value })\r\n    }\r\n\r\n    clearAddress = () => {\r\n        const name = \"address\"\r\n        const value = \"\"\r\n        const { fullAddress, handler } = this.props\r\n        const mergeObject = this.handlerRelated(name, value)\r\n        handler(\"fullAddress\", { ...fullAddress, ...mergeObject, [name]: value })\r\n    }\r\n\r\n    getCityOptions = (cities) => {\r\n        return cities.map((city) => {\r\n            return (\r\n                <Option key={city} value={city}>{city}</Option>\r\n            )\r\n        })\r\n    }\r\n\r\n    getDistricOptions = (districts) => {\r\n        return districts.map((district) => {\r\n            return (\r\n                <Option key={district} value={district}>{district}</Option>\r\n            )\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        const { taiwanPostalCodes, fullAddress: { city, district, postalCode, address } } = this.props\r\n        const cityOptions = this.getCityOptions(this.cities)\r\n        const cityData = taiwanPostalCodes[city];\r\n        const districts = Object.keys(cityData)\r\n        const districtsOptions = this.getDistricOptions(districts)\r\n        return (\r\n            <div ref={this.div}>\r\n                <Card>\r\n                    <CardPrimaryContent>\r\n                        <div style={{ padding: \"1rem\" }}>\r\n                            <Select\r\n                                label='城市'\r\n                                value={city}\r\n                                onEnhancedChange={this.onEnhancedChange.bind(this, \"city\")}\r\n                                enhanced\r\n                                outlined\r\n                            >\r\n                                {cityOptions}\r\n                            </Select>\r\n                            <input type=\"hidden\" name=\"city\" value={city} />\r\n                            <br />\r\n                            <br />\r\n                            <Select\r\n                                label='市/區'\r\n                                value={district}\r\n                                onEnhancedChange={this.onEnhancedChange.bind(this, \"district\")}\r\n                                enhanced\r\n                                outlined\r\n                            >\r\n                                {districtsOptions}\r\n                            </Select>\r\n                            <input type=\"hidden\" name=\"district\" value={district} />\r\n                            <br />\r\n                            <br />\r\n                            <TextField\r\n                                outlined\r\n                                label='郵遞區號'\r\n                            >\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"postalCode\"\r\n                                    value={postalCode}\r\n                                    disabled={true}\r\n                                />\r\n                            </TextField>\r\n                            <input type=\"hidden\" name=\"postalCode\" value={postalCode} />\r\n                            <br />\r\n                            <br />\r\n                            <TextField\r\n                                outlined\r\n                                label='地址'\r\n                                helperText={<HelperText>請輸入正確地址用以寄送商品</HelperText>}\r\n                                leadingIcon={<MaterialIcon role=\"button\" icon=\"alarm\" />}\r\n                                onTrailingIconSelect={this.clearAddress}\r\n                                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\" />}\r\n                            >\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"address\"\r\n                                    value={address}\r\n                                    onChange={this.inputHandler}\r\n                                />\r\n                            </TextField>\r\n                        </div>\r\n                    </CardPrimaryContent>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n//     state = {value: 'pomsky'};\r\n\r\n//   render() {\r\n//     const options = [{\r\n//       label: 'Pomsky',\r\n//       value: 'pomsky',\r\n//     }, {\r\n//       label: 'Golden Doodle',\r\n//       value: 'goldenDoodle',\r\n//       disabled: true,\r\n//     }];\r\n\r\n//     return (\r\n//       <Select\r\n//         label='Choose Dog'\r\n//         onChange={(evt) => this.setState({value: evt.target.value})}\r\n//         value={this.state.value}\r\n//         options={options}\r\n//       />\r\n//     );\r\n//   }\r\n}\r\n\r\nexport default AddressPicker;","import React from 'react' \r\nimport Card, {\r\n    CardPrimaryContent,\r\n} from \"@material/react-card\";\r\n\r\nimport {\r\n    Body2,\r\n    Headline6,\r\n} from '@material/react-typography';\r\n\r\nimport Radio, { NativeRadioControl } from '@material/react-radio';\r\nimport Checkbox from '@material/react-checkbox';\r\nimport TextField, { HelperText, Input } from '@material/react-text-field';\r\nimport Select, { Option } from '@material/react-select';\r\n\r\nclass ReceiptType extends React.Component {\r\n\r\n    componentDidMount = () => {\r\n        document.getElementById(\"byMail\").value = \"byMail\"\r\n        document.getElementById(\"promptRegistered\").value = \"promptRegistered\"\r\n    }\r\n\r\n    inputHandler = (e) => {\r\n        const { name, value } = e.target\r\n\r\n        const { receipt, handler } = this.props\r\n        handler(\"receipt\", { ...receipt, [name]: value })\r\n    }\r\n\r\n    removeValueFromArray = (array, value) => {\r\n        return array.filter((element) => {\r\n            return element != value\r\n        })\r\n    }\r\n\r\n    checkboxHandler = (e) => {\r\n        const checkboxParent = e.target.closest('.mdc-checkbox')\r\n        const newValue = e.target.value\r\n        const name = checkboxParent.getAttribute(\"attributeName\")\r\n        const { receipt, handler } = this.props\r\n\r\n        let values = receipt[name]\r\n        if (values.includes(newValue)) {\r\n            values = this.removeValueFromArray(values, newValue)\r\n        } else {\r\n            values.push(newValue)\r\n        }\r\n\r\n        if (name == \"receiptOptions\" && !values.includes(\"byMail\")) {\r\n            values = []\r\n        }\r\n\r\n        handler(\"receipt\", { ...receipt, [name]: values })\r\n    }\r\n\r\n    render = () => {\r\n        const { receipt, handler } = this.props\r\n        const { receiptType, taxId, receiptOptions } = receipt\r\n        return (\r\n            <div>\r\n                <Card>\r\n                    <CardPrimaryContent>\r\n                        <div style={{ padding: \"1rem\" }}>\r\n                            <Headline6 tag=\"p\">\r\n                                發票類型\r\n                            </Headline6>\r\n                            <Body2 tag=\"div\">\r\n                                <div>\r\n                                    <Radio label='個人' key='personal'>\r\n                                        <NativeRadioControl\r\n                                            name='receiptType'\r\n                                            value='2'\r\n                                            id='personal'\r\n                                            onChange={this.inputHandler}\r\n                                            checked={receiptType == 2}\r\n                                        />\r\n                                    </Radio>\r\n                                    <br />\r\n                                    <Radio label='公司' key='company'>\r\n                                        <NativeRadioControl\r\n                                            value='3'\r\n                                            name='receiptType'\r\n                                            id='company'\r\n                                            onChange={this.inputHandler}\r\n                                            checked={receiptType == 3}\r\n                                        />\r\n                                    </Radio>\r\n                                    <TextField\r\n                                        style={{\"marginLeft\" : \"1rem\"}}\r\n                                        outlined\r\n                                        label='統一編號'\r\n                                    >\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"taxId\"\r\n                                            value={taxId}\r\n                                            onChange={this.inputHandler}\r\n                                        />\r\n                                    </TextField>\r\n                                </div>\r\n                                <br />\r\n                                <div>\r\n                            \r\n                                    <Headline6 tag=\"p\">\r\n                                        郵寄選項\r\n                                    </Headline6>\r\n                                    <React.Fragment>\r\n                                        <Checkbox\r\n                                            name=\"receiptOptions[]\"\r\n                                            attributeName=\"receiptOptions\"\r\n                                            nativeControlId='byMail'\r\n                                            checked={receiptOptions.includes(\"byMail\")}\r\n                                            onChange={this.checkboxHandler}\r\n                                        />\r\n                                        <label htmlFor='byMail'>實體寄送(+ $30)</label>\r\n                                    </React.Fragment>\r\n                                    <br />\r\n                                    <React.Fragment>\r\n                                        <Checkbox\r\n                                            name=\"receiptOptions[]\"\r\n                                            attributeName=\"receiptOptions\"\r\n                                            nativeControlId='promptRegistered'\r\n                                            checked={receiptOptions.includes(\"promptRegistered\")}\r\n                                            disabled={\r\n                                                !receiptOptions.includes(\"byMail\")\r\n                                            }\r\n                                            onChange={this.checkboxHandler}\r\n                                        />\r\n                                        <label htmlFor='promptRegistered'>限時掛號(再 + $30 = 60)</label>\r\n                                    </React.Fragment>\r\n\r\n                                </div>\r\n                            </Body2>\r\n                        </div>\r\n                    </CardPrimaryContent>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReceiptType;","import React from 'react' \r\nimport AddressPicker from './AddressPicker.jsx'\r\nimport ReceiptType from './ReceiptType.jsx'\r\nimport TaiwanPostalCode from './TaiwanPostalCode.json'\r\nimport Button from '@material/react-button';\r\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\r\n\r\nclass RegisterPage extends React.Component {\r\n    // render = () => {\r\n    //     return (\r\n    //                 <div>\r\n    //                     LoginPage\r\n    //                 </div>\r\n    //             )\r\n    // }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            receipt: {\r\n                receiptType: 2,\r\n                taxId: \"\",\r\n                receiptOptions: [\"byMail\"]\r\n            },\r\n            fullAddress: {\r\n                city: \"新竹市\",\r\n                district: \"\",\r\n                postalCode: \"\",\r\n                address: \"\"\r\n            }\r\n        }\r\n    }\r\n\r\n    handler = (name, value) => {\r\n        this.setState({ [name]: value }, () => {\r\n            console.log(this.state)\r\n        })\r\n    }\r\n\r\n    checkIsReceiptTypeReady = () => {\r\n        let result = false\r\n        if (this.state.receipt.receiptType == 2) {\r\n            result = true\r\n        } else if (this.state.receipt.receiptType == 3 && this.state.receipt.taxId != \"\") {\r\n            result = true\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    checkIsAddressReady = () => {\r\n        const { city, district, postalCode, address } = this.state.fullAddress\r\n        if (city != \"\" && district != \"\" && postalCode != \"\" && address != \"\") {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    isReady = () => {\r\n        return this.checkIsReceiptTypeReady() && this.checkIsAddressReady()\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            \r\n     \r\n            \r\n            <form>\r\n                <Grid>\r\n                    <Row>\r\n                        <Cell desktopColumns={3} phoneColumns={0} tabletColumns={1}></Cell>\r\n                        <Cell desktopColumns={6} phoneColumns={4} tabletColumns={6}>\r\n                            <ReceiptType\r\n                                handler={this.handler}\r\n                                receipt={this.state.receipt}\r\n                            />\r\n\r\n                            <br />\r\n                        </Cell>\r\n                        <Cell desktopColumns={3} phoneColumns={0} tabletColumns={1}></Cell>\r\n                    </Row>\r\n                    <Row>\r\n                    <Cell desktopColumns={3} phoneColumns={0} tabletColumns={1}></Cell>\r\n                    <Cell desktopColumns={6} phoneColumns={4} tabletColumns={6}>\r\n                        <AddressPicker\r\n                            handler={this.handler}\r\n                            fullAddress={this.state.fullAddress}\r\n                            taiwanPostalCodes={TaiwanPostalCode}\r\n                        />\r\n                        \r\n                        \r\n                        <br />\r\n                    </Cell>\r\n                    <Cell desktopColumns={3} phoneColumns={0} tabletColumns={1}></Cell>\r\n                    </Row>\r\n                    <Row>\r\n                        <Cell desktopColumns={3} phoneColumns={0} tabletColumns={1}></Cell>\r\n                        <Cell desktopColumns={6} phoneColumns={4} tabletColumns={6}>\r\n                            <Button type=\"submit\" outlined disabled={!this.isReady()}>\r\n                                Submit\r\n                            </Button>\r\n                            \r\n                        </Cell>\r\n                        <Cell desktopColumns={3} phoneColumns={0} tabletColumns={1}></Cell>\r\n                    </Row>\r\n                </Grid>\r\n                \r\n            </form>\r\n          \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n// ReactDOM.render(<App />, document.getElementById(\"app\"));\r\n\r\n\r\n\r\n\r\nexport default RegisterPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const LoginPage = () => {\r\n//     return (\r\n//         <div>\r\n//             LoginPage\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default LoginPage;","import React from 'react'\r\n// import HomePage from '../home/homePage'\r\nimport ProductsIndexPage from '../products/productsIndexPage'\r\nimport ProductsShowPage from '../products/productsShowPage'\r\nimport OrdersIndexPage from '../orders/ordersIndexPage'\r\nimport OrdersShowPage from '../orders/ordersShowPage'\r\nimport OrderSuccessPage from '../orders/orderSuccessPage'\r\nimport OrderFailedPage from '../orders/orderFailedPage'\r\nimport CartIndexPage from '../cart/cartIndexPage'\r\nimport CheckoutPage from '../cart/checkoutPage'\r\nimport RegisterPage from '../register/registerPage'                   \r\nimport NoMatch from '../errors/404'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n  } from \"react-router-dom\";\r\n\r\nconst Routes = () => {\r\n    return (<>\r\n     <Switch>\r\n            <Route path=\"/Register\" exact>\r\n                <RegisterPage/>\r\n            </Route>\r\n            {/* <Route path=\"/\" exact>\r\n                <HomePage />\r\n            </Route> */}\r\n            <Route path=\"/products\" exact>\r\n                <ProductsIndexPage />\r\n            </Route>\r\n            <Route path=\"/products/:id\" exact>\r\n                <ProductsShowPage />\r\n            </Route>\r\n            <Route path=\"/orders\" exact>\r\n                <OrdersIndexPage />\r\n            </Route>\r\n            <Route path=\"/orders/:id\" exact>\r\n                <OrdersShowPage />\r\n            </Route>\r\n            <Route path=\"/orders/:id/success\" exact>\r\n                <OrderSuccessPage />\r\n            </Route>\r\n            <Route path=\"/orders/:id/failed\" exact>\r\n                <OrderFailedPage />\r\n            </Route>\r\n            <Route path=\"/cart\" exact>\r\n                <CartIndexPage />\r\n            </Route>\r\n            <Route path=\"/checkout\" exact>\r\n                <CheckoutPage />\r\n            </Route>\r\n            <Route path=\"*\">\r\n                {/* <NoMatch /> */}\r\n                <RegisterPage/>\r\n            </Route>\r\n        </Switch>\r\n    </>)\r\n}\r\n\r\nexport default Routes;","import React from 'react'\r\nimport './App.scss';\r\nimport {\r\n    BrowserRouter as Router,\r\n  } from \"react-router-dom\";\r\n\r\nimport Nav from './view/layout/nav'\r\n\r\nimport AppRouters from './view/layout/appRoutes'\r\n\r\nconst App = () => {\r\n    return (\r\n    <Router>\r\n        <Nav />\r\n        <main className=\"mdc-top-app-bar--fixed-adjust\">\r\n            <AppRouters />\r\n        </main>\r\n    </Router>\r\n    )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}